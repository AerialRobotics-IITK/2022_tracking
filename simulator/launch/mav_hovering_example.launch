<launch>
  <arg name="husky" default="true"/>
  <arg name="track" default="true"/>
  <arg name="start_x" default="0.0"/>
  <arg name="start_y" default="0.0"/>
  <arg name="start_z" default="5.0"/>
  <arg name="display" default="false"/>
  <arg name="mav_name" default="firefly"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="false"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <group ns="$(arg mav_name)">

    <include file="$(find rotors_gazebo)/launch/spawn_mav.launch">
      <arg name="mav_name" value="$(arg mav_name)" />

      <!-- <arg name="model" value="$(find rotors_description)/urdf/mav_with_downward_camera.gazebo" if="$(eval arg('track')==true)"/> -->
      <arg name="model" value="$(find simulator)/urdf/mav.xacro" if="$(eval arg('track')==true)"/>

      <arg name="enable_logging" value="$(arg enable_logging)" />
      <arg name="enable_ground_truth" value="$(arg enable_ground_truth)" />
      <arg name="log_file" value="$(arg log_file)"/>
    </include>

    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>

    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen">
      <param name="x" value="$(arg start_x)"/>
      <param name="y" value="$(arg start_y)"/>
      <param name="z" value="$(arg start_z)"/>
    </node>
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

  </group>

<!-- START -->
  <group if="$(eval arg('husky')==true)">

    <include file="$(find husky_gazebo)/launch/spawn_husky.launch">
      <arg name="x" value="1.0"/>
      <arg name="y" value="1.0"/>
      <!-- <arg name="z" default="1.0"/> -->
    </include>

    <node name="teleop_twist_keyboard" pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" output="screen"/>

  </group>

  <group if="$(eval arg('track')==true)">

    <node name="tracker" pkg="tracking" type="tracker_combined" output="screen"/>
    <!-- <node name="tracker" pkg="tracking" type="tracker_node" output="screen"/>  -->
    <node name="pose" pkg="pose_estimate" type="pose_estimate_node" output="screen" launch-prefix="gnome-terminal --command"/>

  </group>
<!-- END -->

</launch>
