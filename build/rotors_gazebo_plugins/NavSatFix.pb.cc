// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavSatFix.proto

#include "NavSatFix.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_Header_2eproto
namespace gz_sensor_msgs {
class NavSatFixDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NavSatFix>
      _instance;
} _NavSatFix_default_instance_;
}  // namespace gz_sensor_msgs
namespace protobuf_NavSatFix_2eproto {
static void InitDefaultsNavSatFix() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz_sensor_msgs::_NavSatFix_default_instance_;
    new (ptr) ::gz_sensor_msgs::NavSatFix();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz_sensor_msgs::NavSatFix::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_NavSatFix =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsNavSatFix}, {
      &protobuf_Header_2eproto::scc_info_Header.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NavSatFix.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, service_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, latitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, longitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, altitude_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, position_covariance_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::NavSatFix, position_covariance_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::gz_sensor_msgs::NavSatFix)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz_sensor_msgs::_NavSatFix_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "NavSatFix.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017NavSatFix.proto\022\016gz_sensor_msgs\032\014Heade"
      "r.proto\"\215\005\n\tNavSatFix\022#\n\006header\030\001 \002(\0132\023."
      "gz_std_msgs.Header\0222\n\007service\030\002 \002(\0162!.gz"
      "_sensor_msgs.NavSatFix.Service\0220\n\006status"
      "\030\003 \002(\0162 .gz_sensor_msgs.NavSatFix.Status"
      "\022\020\n\010latitude\030\004 \002(\001\022\021\n\tlongitude\030\005 \002(\001\022\020\n"
      "\010altitude\030\006 \002(\001\022R\n\030position_covariance_t"
      "ype\030\007 \002(\01620.gz_sensor_msgs.NavSatFix.Pos"
      "itionCovarianceType\022\037\n\023position_covarian"
      "ce\030\010 \003(\002B\002\020\001\"Y\n\007Service\022\017\n\013SERVICE_GPS\020\000"
      "\022\023\n\017SERVICE_GLONASS\020\001\022\023\n\017SERVICE_COMPASS"
      "\020\002\022\023\n\017SERVICE_GALILEO\020\003\"U\n\006Status\022\021\n\rSTA"
      "TUS_NO_FIX\020\000\022\016\n\nSTATUS_FIX\020\001\022\023\n\017STATUS_S"
      "BAS_FIX\020\002\022\023\n\017STATUS_GBAS_FIX\020\003\"\226\001\n\026Posit"
      "ionCovarianceType\022\033\n\027COVARIANCE_TYPE_UNK"
      "NOWN\020\000\022 \n\034COVARIANCE_TYPE_APPROXIMATED\020\001"
      "\022\"\n\036COVARIANCE_TYPE_DIAGONAL_KNOWN\020\002\022\031\n\025"
      "COVARIANCE_TYPE_KNOWN\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 703);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "NavSatFix.proto", &protobuf_RegisterTypes);
  ::protobuf_Header_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_NavSatFix_2eproto
namespace gz_sensor_msgs {
const ::google::protobuf::EnumDescriptor* NavSatFix_Service_descriptor() {
  protobuf_NavSatFix_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NavSatFix_2eproto::file_level_enum_descriptors[0];
}
bool NavSatFix_Service_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatFix_Service NavSatFix::SERVICE_GPS;
const NavSatFix_Service NavSatFix::SERVICE_GLONASS;
const NavSatFix_Service NavSatFix::SERVICE_COMPASS;
const NavSatFix_Service NavSatFix::SERVICE_GALILEO;
const NavSatFix_Service NavSatFix::Service_MIN;
const NavSatFix_Service NavSatFix::Service_MAX;
const int NavSatFix::Service_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavSatFix_Status_descriptor() {
  protobuf_NavSatFix_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NavSatFix_2eproto::file_level_enum_descriptors[1];
}
bool NavSatFix_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatFix_Status NavSatFix::STATUS_NO_FIX;
const NavSatFix_Status NavSatFix::STATUS_FIX;
const NavSatFix_Status NavSatFix::STATUS_SBAS_FIX;
const NavSatFix_Status NavSatFix::STATUS_GBAS_FIX;
const NavSatFix_Status NavSatFix::Status_MIN;
const NavSatFix_Status NavSatFix::Status_MAX;
const int NavSatFix::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NavSatFix_PositionCovarianceType_descriptor() {
  protobuf_NavSatFix_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_NavSatFix_2eproto::file_level_enum_descriptors[2];
}
bool NavSatFix_PositionCovarianceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_UNKNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_APPROXIMATED;
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_DIAGONAL_KNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::COVARIANCE_TYPE_KNOWN;
const NavSatFix_PositionCovarianceType NavSatFix::PositionCovarianceType_MIN;
const NavSatFix_PositionCovarianceType NavSatFix::PositionCovarianceType_MAX;
const int NavSatFix::PositionCovarianceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void NavSatFix::InitAsDefaultInstance() {
  ::gz_sensor_msgs::_NavSatFix_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz_std_msgs::Header*>(
      ::gz_std_msgs::Header::internal_default_instance());
}
void NavSatFix::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NavSatFix::kHeaderFieldNumber;
const int NavSatFix::kServiceFieldNumber;
const int NavSatFix::kStatusFieldNumber;
const int NavSatFix::kLatitudeFieldNumber;
const int NavSatFix::kLongitudeFieldNumber;
const int NavSatFix::kAltitudeFieldNumber;
const int NavSatFix::kPositionCovarianceTypeFieldNumber;
const int NavSatFix::kPositionCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NavSatFix::NavSatFix()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_NavSatFix_2eproto::scc_info_NavSatFix.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_sensor_msgs.NavSatFix)
}
NavSatFix::NavSatFix(const NavSatFix& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      position_covariance_(from.position_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz_std_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  ::memcpy(&service_, &from.service_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_covariance_type_) -
    reinterpret_cast<char*>(&service_)) + sizeof(position_covariance_type_));
  // @@protoc_insertion_point(copy_constructor:gz_sensor_msgs.NavSatFix)
}

void NavSatFix::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_covariance_type_) -
      reinterpret_cast<char*>(&header_)) + sizeof(position_covariance_type_));
}

NavSatFix::~NavSatFix() {
  // @@protoc_insertion_point(destructor:gz_sensor_msgs.NavSatFix)
  SharedDtor();
}

void NavSatFix::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void NavSatFix::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NavSatFix::descriptor() {
  ::protobuf_NavSatFix_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NavSatFix_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NavSatFix& NavSatFix::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_NavSatFix_2eproto::scc_info_NavSatFix.base);
  return *internal_default_instance();
}


void NavSatFix::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_sensor_msgs.NavSatFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->Clear();
  }
  if (cached_has_bits & 126u) {
    ::memset(&service_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_covariance_type_) -
        reinterpret_cast<char*>(&service_)) + sizeof(position_covariance_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NavSatFix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_sensor_msgs.NavSatFix)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gz_sensor_msgs.NavSatFix.Service service = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_sensor_msgs::NavSatFix_Service_IsValid(value)) {
            set_service(static_cast< ::gz_sensor_msgs::NavSatFix_Service >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gz_sensor_msgs.NavSatFix.Status status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_sensor_msgs::NavSatFix_Status_IsValid(value)) {
            set_status(static_cast< ::gz_sensor_msgs::NavSatFix_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double latitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double longitude = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double altitude = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_sensor_msgs::NavSatFix_PositionCovarianceType_IsValid(value)) {
            set_position_covariance_type(static_cast< ::gz_sensor_msgs::NavSatFix_PositionCovarianceType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float position_covariance = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_position_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 66u, input, this->mutable_position_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_sensor_msgs.NavSatFix)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_sensor_msgs.NavSatFix)
  return false;
#undef DO_
}

void NavSatFix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_sensor_msgs.NavSatFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gz_std_msgs.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // required .gz_sensor_msgs.NavSatFix.Service service = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->service(), output);
  }

  // required .gz_sensor_msgs.NavSatFix.Status status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->latitude(), output);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->longitude(), output);
  }

  // required double altitude = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->altitude(), output);
  }

  // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->position_covariance_type(), output);
  }

  // repeated float position_covariance = 8 [packed = true];
  if (this->position_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _position_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->position_covariance().data(), this->position_covariance_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_sensor_msgs.NavSatFix)
}

::google::protobuf::uint8* NavSatFix::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz_sensor_msgs.NavSatFix)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gz_std_msgs.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // required .gz_sensor_msgs.NavSatFix.Service service = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->service(), target);
  }

  // required .gz_sensor_msgs.NavSatFix.Status status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // required double latitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->latitude(), target);
  }

  // required double longitude = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->longitude(), target);
  }

  // required double altitude = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->altitude(), target);
  }

  // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->position_covariance_type(), target);
  }

  // repeated float position_covariance = 8 [packed = true];
  if (this->position_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _position_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->position_covariance_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_sensor_msgs.NavSatFix)
  return target;
}

size_t NavSatFix::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_sensor_msgs.NavSatFix)
  size_t total_size = 0;

  if (has_header()) {
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (has_service()) {
    // required .gz_sensor_msgs.NavSatFix.Service service = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->service());
  }

  if (has_status()) {
    // required .gz_sensor_msgs.NavSatFix.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
  }

  if (has_latitude()) {
    // required double latitude = 4;
    total_size += 1 + 8;
  }

  if (has_longitude()) {
    // required double longitude = 5;
    total_size += 1 + 8;
  }

  if (has_altitude()) {
    // required double altitude = 6;
    total_size += 1 + 8;
  }

  if (has_position_covariance_type()) {
    // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_covariance_type());
  }

  return total_size;
}
size_t NavSatFix::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz_sensor_msgs.NavSatFix)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);

    // required .gz_sensor_msgs.NavSatFix.Service service = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->service());

    // required .gz_sensor_msgs.NavSatFix.Status status = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());

    // required double latitude = 4;
    total_size += 1 + 8;

    // required double longitude = 5;
    total_size += 1 + 8;

    // required double altitude = 6;
    total_size += 1 + 8;

    // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->position_covariance_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float position_covariance = 8 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->position_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _position_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NavSatFix::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_sensor_msgs.NavSatFix)
  GOOGLE_DCHECK_NE(&from, this);
  const NavSatFix* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NavSatFix>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_sensor_msgs.NavSatFix)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_sensor_msgs.NavSatFix)
    MergeFrom(*source);
  }
}

void NavSatFix::MergeFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_sensor_msgs.NavSatFix)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  position_covariance_.MergeFrom(from.position_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      service_ = from.service_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      position_covariance_type_ = from.position_covariance_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NavSatFix::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_sensor_msgs.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavSatFix::CopyFrom(const NavSatFix& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_sensor_msgs.NavSatFix)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavSatFix::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void NavSatFix::Swap(NavSatFix* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NavSatFix::InternalSwap(NavSatFix* other) {
  using std::swap;
  position_covariance_.InternalSwap(&other->position_covariance_);
  swap(header_, other->header_);
  swap(service_, other->service_);
  swap(status_, other->status_);
  swap(latitude_, other->latitude_);
  swap(longitude_, other->longitude_);
  swap(altitude_, other->altitude_);
  swap(position_covariance_type_, other->position_covariance_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NavSatFix::GetMetadata() const {
  protobuf_NavSatFix_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_NavSatFix_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gz_sensor_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz_sensor_msgs::NavSatFix* Arena::CreateMaybeMessage< ::gz_sensor_msgs::NavSatFix >(Arena* arena) {
  return Arena::CreateInternal< ::gz_sensor_msgs::NavSatFix >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
