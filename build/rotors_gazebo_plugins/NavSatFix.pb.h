// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: NavSatFix.proto

#ifndef PROTOBUF_INCLUDED_NavSatFix_2eproto
#define PROTOBUF_INCLUDED_NavSatFix_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_NavSatFix_2eproto 

namespace protobuf_NavSatFix_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_NavSatFix_2eproto
namespace gz_sensor_msgs {
class NavSatFix;
class NavSatFixDefaultTypeInternal;
extern NavSatFixDefaultTypeInternal _NavSatFix_default_instance_;
}  // namespace gz_sensor_msgs
namespace google {
namespace protobuf {
template<> ::gz_sensor_msgs::NavSatFix* Arena::CreateMaybeMessage<::gz_sensor_msgs::NavSatFix>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz_sensor_msgs {

enum NavSatFix_Service {
  NavSatFix_Service_SERVICE_GPS = 0,
  NavSatFix_Service_SERVICE_GLONASS = 1,
  NavSatFix_Service_SERVICE_COMPASS = 2,
  NavSatFix_Service_SERVICE_GALILEO = 3
};
bool NavSatFix_Service_IsValid(int value);
const NavSatFix_Service NavSatFix_Service_Service_MIN = NavSatFix_Service_SERVICE_GPS;
const NavSatFix_Service NavSatFix_Service_Service_MAX = NavSatFix_Service_SERVICE_GALILEO;
const int NavSatFix_Service_Service_ARRAYSIZE = NavSatFix_Service_Service_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavSatFix_Service_descriptor();
inline const ::std::string& NavSatFix_Service_Name(NavSatFix_Service value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavSatFix_Service_descriptor(), value);
}
inline bool NavSatFix_Service_Parse(
    const ::std::string& name, NavSatFix_Service* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavSatFix_Service>(
    NavSatFix_Service_descriptor(), name, value);
}
enum NavSatFix_Status {
  NavSatFix_Status_STATUS_NO_FIX = 0,
  NavSatFix_Status_STATUS_FIX = 1,
  NavSatFix_Status_STATUS_SBAS_FIX = 2,
  NavSatFix_Status_STATUS_GBAS_FIX = 3
};
bool NavSatFix_Status_IsValid(int value);
const NavSatFix_Status NavSatFix_Status_Status_MIN = NavSatFix_Status_STATUS_NO_FIX;
const NavSatFix_Status NavSatFix_Status_Status_MAX = NavSatFix_Status_STATUS_GBAS_FIX;
const int NavSatFix_Status_Status_ARRAYSIZE = NavSatFix_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavSatFix_Status_descriptor();
inline const ::std::string& NavSatFix_Status_Name(NavSatFix_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavSatFix_Status_descriptor(), value);
}
inline bool NavSatFix_Status_Parse(
    const ::std::string& name, NavSatFix_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavSatFix_Status>(
    NavSatFix_Status_descriptor(), name, value);
}
enum NavSatFix_PositionCovarianceType {
  NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_UNKNOWN = 0,
  NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_APPROXIMATED = 1,
  NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_DIAGONAL_KNOWN = 2,
  NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_KNOWN = 3
};
bool NavSatFix_PositionCovarianceType_IsValid(int value);
const NavSatFix_PositionCovarianceType NavSatFix_PositionCovarianceType_PositionCovarianceType_MIN = NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_UNKNOWN;
const NavSatFix_PositionCovarianceType NavSatFix_PositionCovarianceType_PositionCovarianceType_MAX = NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_KNOWN;
const int NavSatFix_PositionCovarianceType_PositionCovarianceType_ARRAYSIZE = NavSatFix_PositionCovarianceType_PositionCovarianceType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NavSatFix_PositionCovarianceType_descriptor();
inline const ::std::string& NavSatFix_PositionCovarianceType_Name(NavSatFix_PositionCovarianceType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NavSatFix_PositionCovarianceType_descriptor(), value);
}
inline bool NavSatFix_PositionCovarianceType_Parse(
    const ::std::string& name, NavSatFix_PositionCovarianceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NavSatFix_PositionCovarianceType>(
    NavSatFix_PositionCovarianceType_descriptor(), name, value);
}
// ===================================================================

class NavSatFix : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_sensor_msgs.NavSatFix) */ {
 public:
  NavSatFix();
  virtual ~NavSatFix();

  NavSatFix(const NavSatFix& from);

  inline NavSatFix& operator=(const NavSatFix& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NavSatFix(NavSatFix&& from) noexcept
    : NavSatFix() {
    *this = ::std::move(from);
  }

  inline NavSatFix& operator=(NavSatFix&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NavSatFix& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NavSatFix* internal_default_instance() {
    return reinterpret_cast<const NavSatFix*>(
               &_NavSatFix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NavSatFix* other);
  friend void swap(NavSatFix& a, NavSatFix& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NavSatFix* New() const final {
    return CreateMaybeMessage<NavSatFix>(NULL);
  }

  NavSatFix* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NavSatFix>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NavSatFix& from);
  void MergeFrom(const NavSatFix& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NavSatFix* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NavSatFix_Service Service;
  static const Service SERVICE_GPS =
    NavSatFix_Service_SERVICE_GPS;
  static const Service SERVICE_GLONASS =
    NavSatFix_Service_SERVICE_GLONASS;
  static const Service SERVICE_COMPASS =
    NavSatFix_Service_SERVICE_COMPASS;
  static const Service SERVICE_GALILEO =
    NavSatFix_Service_SERVICE_GALILEO;
  static inline bool Service_IsValid(int value) {
    return NavSatFix_Service_IsValid(value);
  }
  static const Service Service_MIN =
    NavSatFix_Service_Service_MIN;
  static const Service Service_MAX =
    NavSatFix_Service_Service_MAX;
  static const int Service_ARRAYSIZE =
    NavSatFix_Service_Service_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Service_descriptor() {
    return NavSatFix_Service_descriptor();
  }
  static inline const ::std::string& Service_Name(Service value) {
    return NavSatFix_Service_Name(value);
  }
  static inline bool Service_Parse(const ::std::string& name,
      Service* value) {
    return NavSatFix_Service_Parse(name, value);
  }

  typedef NavSatFix_Status Status;
  static const Status STATUS_NO_FIX =
    NavSatFix_Status_STATUS_NO_FIX;
  static const Status STATUS_FIX =
    NavSatFix_Status_STATUS_FIX;
  static const Status STATUS_SBAS_FIX =
    NavSatFix_Status_STATUS_SBAS_FIX;
  static const Status STATUS_GBAS_FIX =
    NavSatFix_Status_STATUS_GBAS_FIX;
  static inline bool Status_IsValid(int value) {
    return NavSatFix_Status_IsValid(value);
  }
  static const Status Status_MIN =
    NavSatFix_Status_Status_MIN;
  static const Status Status_MAX =
    NavSatFix_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    NavSatFix_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return NavSatFix_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return NavSatFix_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return NavSatFix_Status_Parse(name, value);
  }

  typedef NavSatFix_PositionCovarianceType PositionCovarianceType;
  static const PositionCovarianceType COVARIANCE_TYPE_UNKNOWN =
    NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_UNKNOWN;
  static const PositionCovarianceType COVARIANCE_TYPE_APPROXIMATED =
    NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_APPROXIMATED;
  static const PositionCovarianceType COVARIANCE_TYPE_DIAGONAL_KNOWN =
    NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_DIAGONAL_KNOWN;
  static const PositionCovarianceType COVARIANCE_TYPE_KNOWN =
    NavSatFix_PositionCovarianceType_COVARIANCE_TYPE_KNOWN;
  static inline bool PositionCovarianceType_IsValid(int value) {
    return NavSatFix_PositionCovarianceType_IsValid(value);
  }
  static const PositionCovarianceType PositionCovarianceType_MIN =
    NavSatFix_PositionCovarianceType_PositionCovarianceType_MIN;
  static const PositionCovarianceType PositionCovarianceType_MAX =
    NavSatFix_PositionCovarianceType_PositionCovarianceType_MAX;
  static const int PositionCovarianceType_ARRAYSIZE =
    NavSatFix_PositionCovarianceType_PositionCovarianceType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PositionCovarianceType_descriptor() {
    return NavSatFix_PositionCovarianceType_descriptor();
  }
  static inline const ::std::string& PositionCovarianceType_Name(PositionCovarianceType value) {
    return NavSatFix_PositionCovarianceType_Name(value);
  }
  static inline bool PositionCovarianceType_Parse(const ::std::string& name,
      PositionCovarianceType* value) {
    return NavSatFix_PositionCovarianceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated float position_covariance = 8 [packed = true];
  int position_covariance_size() const;
  void clear_position_covariance();
  static const int kPositionCovarianceFieldNumber = 8;
  float position_covariance(int index) const;
  void set_position_covariance(int index, float value);
  void add_position_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      position_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position_covariance();

  // required .gz_std_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz_std_msgs::Header& _internal_header() const;
  public:
  const ::gz_std_msgs::Header& header() const;
  ::gz_std_msgs::Header* release_header();
  ::gz_std_msgs::Header* mutable_header();
  void set_allocated_header(::gz_std_msgs::Header* header);

  // required .gz_sensor_msgs.NavSatFix.Service service = 2;
  bool has_service() const;
  void clear_service();
  static const int kServiceFieldNumber = 2;
  ::gz_sensor_msgs::NavSatFix_Service service() const;
  void set_service(::gz_sensor_msgs::NavSatFix_Service value);

  // required .gz_sensor_msgs.NavSatFix.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::gz_sensor_msgs::NavSatFix_Status status() const;
  void set_status(::gz_sensor_msgs::NavSatFix_Status value);

  // required double latitude = 4;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 4;
  double latitude() const;
  void set_latitude(double value);

  // required double longitude = 5;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 5;
  double longitude() const;
  void set_longitude(double value);

  // required double altitude = 6;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 6;
  double altitude() const;
  void set_altitude(double value);

  // required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
  bool has_position_covariance_type() const;
  void clear_position_covariance_type();
  static const int kPositionCovarianceTypeFieldNumber = 7;
  ::gz_sensor_msgs::NavSatFix_PositionCovarianceType position_covariance_type() const;
  void set_position_covariance_type(::gz_sensor_msgs::NavSatFix_PositionCovarianceType value);

  // @@protoc_insertion_point(class_scope:gz_sensor_msgs.NavSatFix)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_service();
  void clear_has_service();
  void set_has_status();
  void clear_has_status();
  void set_has_latitude();
  void clear_has_latitude();
  void set_has_longitude();
  void clear_has_longitude();
  void set_has_altitude();
  void clear_has_altitude();
  void set_has_position_covariance_type();
  void clear_has_position_covariance_type();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< float > position_covariance_;
  mutable int _position_covariance_cached_byte_size_;
  ::gz_std_msgs::Header* header_;
  int service_;
  int status_;
  double latitude_;
  double longitude_;
  double altitude_;
  int position_covariance_type_;
  friend struct ::protobuf_NavSatFix_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NavSatFix

// required .gz_std_msgs.Header header = 1;
inline bool NavSatFix::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NavSatFix::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NavSatFix::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gz_std_msgs::Header& NavSatFix::_internal_header() const {
  return *header_;
}
inline const ::gz_std_msgs::Header& NavSatFix::header() const {
  const ::gz_std_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz_std_msgs::Header*>(
      &::gz_std_msgs::_Header_default_instance_);
}
inline ::gz_std_msgs::Header* NavSatFix::release_header() {
  // @@protoc_insertion_point(field_release:gz_sensor_msgs.NavSatFix.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz_std_msgs::Header* NavSatFix::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz_std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz_sensor_msgs.NavSatFix.header)
  return header_;
}
inline void NavSatFix::set_allocated_header(::gz_std_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz_sensor_msgs.NavSatFix.header)
}

// required .gz_sensor_msgs.NavSatFix.Service service = 2;
inline bool NavSatFix::has_service() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NavSatFix::set_has_service() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NavSatFix::clear_has_service() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NavSatFix::clear_service() {
  service_ = 0;
  clear_has_service();
}
inline ::gz_sensor_msgs::NavSatFix_Service NavSatFix::service() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.service)
  return static_cast< ::gz_sensor_msgs::NavSatFix_Service >(service_);
}
inline void NavSatFix::set_service(::gz_sensor_msgs::NavSatFix_Service value) {
  assert(::gz_sensor_msgs::NavSatFix_Service_IsValid(value));
  set_has_service();
  service_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.service)
}

// required .gz_sensor_msgs.NavSatFix.Status status = 3;
inline bool NavSatFix::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NavSatFix::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NavSatFix::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NavSatFix::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::gz_sensor_msgs::NavSatFix_Status NavSatFix::status() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.status)
  return static_cast< ::gz_sensor_msgs::NavSatFix_Status >(status_);
}
inline void NavSatFix::set_status(::gz_sensor_msgs::NavSatFix_Status value) {
  assert(::gz_sensor_msgs::NavSatFix_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.status)
}

// required double latitude = 4;
inline bool NavSatFix::has_latitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NavSatFix::set_has_latitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NavSatFix::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NavSatFix::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double NavSatFix::latitude() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.latitude)
  return latitude_;
}
inline void NavSatFix::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.latitude)
}

// required double longitude = 5;
inline bool NavSatFix::has_longitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NavSatFix::set_has_longitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NavSatFix::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NavSatFix::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double NavSatFix::longitude() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.longitude)
  return longitude_;
}
inline void NavSatFix::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.longitude)
}

// required double altitude = 6;
inline bool NavSatFix::has_altitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NavSatFix::set_has_altitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NavSatFix::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NavSatFix::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline double NavSatFix::altitude() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.altitude)
  return altitude_;
}
inline void NavSatFix::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.altitude)
}

// required .gz_sensor_msgs.NavSatFix.PositionCovarianceType position_covariance_type = 7;
inline bool NavSatFix::has_position_covariance_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NavSatFix::set_has_position_covariance_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NavSatFix::clear_has_position_covariance_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NavSatFix::clear_position_covariance_type() {
  position_covariance_type_ = 0;
  clear_has_position_covariance_type();
}
inline ::gz_sensor_msgs::NavSatFix_PositionCovarianceType NavSatFix::position_covariance_type() const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.position_covariance_type)
  return static_cast< ::gz_sensor_msgs::NavSatFix_PositionCovarianceType >(position_covariance_type_);
}
inline void NavSatFix::set_position_covariance_type(::gz_sensor_msgs::NavSatFix_PositionCovarianceType value) {
  assert(::gz_sensor_msgs::NavSatFix_PositionCovarianceType_IsValid(value));
  set_has_position_covariance_type();
  position_covariance_type_ = value;
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.position_covariance_type)
}

// repeated float position_covariance = 8 [packed = true];
inline int NavSatFix::position_covariance_size() const {
  return position_covariance_.size();
}
inline void NavSatFix::clear_position_covariance() {
  position_covariance_.Clear();
}
inline float NavSatFix::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:gz_sensor_msgs.NavSatFix.position_covariance)
  return position_covariance_.Get(index);
}
inline void NavSatFix::set_position_covariance(int index, float value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:gz_sensor_msgs.NavSatFix.position_covariance)
}
inline void NavSatFix::add_position_covariance(float value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:gz_sensor_msgs.NavSatFix.position_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
NavSatFix::position_covariance() const {
  // @@protoc_insertion_point(field_list:gz_sensor_msgs.NavSatFix.position_covariance)
  return position_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
NavSatFix::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:gz_sensor_msgs.NavSatFix.position_covariance)
  return &position_covariance_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_sensor_msgs

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gz_sensor_msgs::NavSatFix_Service> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz_sensor_msgs::NavSatFix_Service>() {
  return ::gz_sensor_msgs::NavSatFix_Service_descriptor();
}
template <> struct is_proto_enum< ::gz_sensor_msgs::NavSatFix_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz_sensor_msgs::NavSatFix_Status>() {
  return ::gz_sensor_msgs::NavSatFix_Status_descriptor();
}
template <> struct is_proto_enum< ::gz_sensor_msgs::NavSatFix_PositionCovarianceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gz_sensor_msgs::NavSatFix_PositionCovarianceType>() {
  return ::gz_sensor_msgs::NavSatFix_PositionCovarianceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_NavSatFix_2eproto
