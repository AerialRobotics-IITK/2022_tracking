// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Odometry.proto

#include "Odometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_Header_2eproto
namespace protobuf_PoseWithCovariance_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_PoseWithCovariance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_PoseWithCovariance;
}  // namespace protobuf_PoseWithCovariance_2eproto
namespace protobuf_TwistWithCovariance_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_TwistWithCovariance_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TwistWithCovariance;
}  // namespace protobuf_TwistWithCovariance_2eproto
namespace gz_geometry_msgs {
class OdometryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Odometry>
      _instance;
} _Odometry_default_instance_;
}  // namespace gz_geometry_msgs
namespace protobuf_Odometry_2eproto {
static void InitDefaultsOdometry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz_geometry_msgs::_Odometry_default_instance_;
    new (ptr) ::gz_geometry_msgs::Odometry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz_geometry_msgs::Odometry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Odometry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsOdometry}, {
      &protobuf_Header_2eproto::scc_info_Header.base,
      &protobuf_PoseWithCovariance_2eproto::scc_info_PoseWithCovariance.base,
      &protobuf_TwistWithCovariance_2eproto::scc_info_TwistWithCovariance.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Odometry.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_geometry_msgs::Odometry, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_geometry_msgs::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_geometry_msgs::Odometry, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_geometry_msgs::Odometry, child_frame_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_geometry_msgs::Odometry, pose_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_geometry_msgs::Odometry, twist_),
  1,
  0,
  2,
  3,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::gz_geometry_msgs::Odometry)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz_geometry_msgs::_Odometry_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Odometry.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016Odometry.proto\022\020gz_geometry_msgs\032\014Head"
      "er.proto\032\030PoseWithCovariance.proto\032\031Twis"
      "tWithCovariance.proto\"\261\001\n\010Odometry\022#\n\006he"
      "ader\030\001 \002(\0132\023.gz_std_msgs.Header\022\026\n\016child"
      "_frame_id\030\002 \002(\t\0222\n\004pose\030\003 \002(\0132$.gz_geome"
      "try_msgs.PoseWithCovariance\0224\n\005twist\030\004 \002"
      "(\0132%.gz_geometry_msgs.TwistWithCovarianc"
      "e"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Odometry.proto", &protobuf_RegisterTypes);
  ::protobuf_Header_2eproto::AddDescriptors();
  ::protobuf_PoseWithCovariance_2eproto::AddDescriptors();
  ::protobuf_TwistWithCovariance_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Odometry_2eproto
namespace gz_geometry_msgs {

// ===================================================================

void Odometry::InitAsDefaultInstance() {
  ::gz_geometry_msgs::_Odometry_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz_std_msgs::Header*>(
      ::gz_std_msgs::Header::internal_default_instance());
  ::gz_geometry_msgs::_Odometry_default_instance_._instance.get_mutable()->pose_ = const_cast< ::gz_geometry_msgs::PoseWithCovariance*>(
      ::gz_geometry_msgs::PoseWithCovariance::internal_default_instance());
  ::gz_geometry_msgs::_Odometry_default_instance_._instance.get_mutable()->twist_ = const_cast< ::gz_geometry_msgs::TwistWithCovariance*>(
      ::gz_geometry_msgs::TwistWithCovariance::internal_default_instance());
}
void Odometry::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void Odometry::clear_pose() {
  if (pose_ != NULL) pose_->Clear();
  clear_has_pose();
}
void Odometry::clear_twist() {
  if (twist_ != NULL) twist_->Clear();
  clear_has_twist();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Odometry::kHeaderFieldNumber;
const int Odometry::kChildFrameIdFieldNumber;
const int Odometry::kPoseFieldNumber;
const int Odometry::kTwistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Odometry::Odometry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Odometry_2eproto::scc_info_Odometry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_geometry_msgs.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  child_frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_child_frame_id()) {
    child_frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_frame_id_);
  }
  if (from.has_header()) {
    header_ = new ::gz_std_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::gz_geometry_msgs::PoseWithCovariance(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_twist()) {
    twist_ = new ::gz_geometry_msgs::TwistWithCovariance(*from.twist_);
  } else {
    twist_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz_geometry_msgs.Odometry)
}

void Odometry::SharedCtor() {
  child_frame_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&twist_) -
      reinterpret_cast<char*>(&header_)) + sizeof(twist_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:gz_geometry_msgs.Odometry)
  SharedDtor();
}

void Odometry::SharedDtor() {
  child_frame_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete twist_;
}

void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Odometry::descriptor() {
  ::protobuf_Odometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Odometry_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Odometry& Odometry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Odometry_2eproto::scc_info_Odometry.base);
  return *internal_default_instance();
}


void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_geometry_msgs.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      child_frame_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(twist_ != NULL);
      twist_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Odometry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_geometry_msgs.Odometry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string child_frame_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_child_frame_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gz_geometry_msgs.Odometry.child_frame_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gz_geometry_msgs.PoseWithCovariance pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gz_geometry_msgs.TwistWithCovariance twist = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_twist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_geometry_msgs.Odometry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_geometry_msgs.Odometry)
  return false;
#undef DO_
}

void Odometry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_geometry_msgs.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gz_std_msgs.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // required string child_frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_geometry_msgs.Odometry.child_frame_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->child_frame_id(), output);
  }

  // required .gz_geometry_msgs.PoseWithCovariance pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_pose(), output);
  }

  // required .gz_geometry_msgs.TwistWithCovariance twist = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_twist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_geometry_msgs.Odometry)
}

::google::protobuf::uint8* Odometry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz_geometry_msgs.Odometry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gz_std_msgs.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // required string child_frame_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->child_frame_id().data(), static_cast<int>(this->child_frame_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_geometry_msgs.Odometry.child_frame_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->child_frame_id(), target);
  }

  // required .gz_geometry_msgs.PoseWithCovariance pose = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_pose(), deterministic, target);
  }

  // required .gz_geometry_msgs.TwistWithCovariance twist = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_twist(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_geometry_msgs.Odometry)
  return target;
}

size_t Odometry::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_geometry_msgs.Odometry)
  size_t total_size = 0;

  if (has_child_frame_id()) {
    // required string child_frame_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->child_frame_id());
  }

  if (has_header()) {
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (has_pose()) {
    // required .gz_geometry_msgs.PoseWithCovariance pose = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  if (has_twist()) {
    // required .gz_geometry_msgs.TwistWithCovariance twist = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *twist_);
  }

  return total_size;
}
size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz_geometry_msgs.Odometry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string child_frame_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->child_frame_id());

    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);

    // required .gz_geometry_msgs.PoseWithCovariance pose = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pose_);

    // required .gz_geometry_msgs.TwistWithCovariance twist = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *twist_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odometry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_geometry_msgs.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  const Odometry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Odometry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_geometry_msgs.Odometry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_geometry_msgs.Odometry)
    MergeFrom(*source);
  }
}

void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_geometry_msgs.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_child_frame_id();
      child_frame_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.child_frame_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::gz_geometry_msgs::PoseWithCovariance::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_twist()->::gz_geometry_msgs::TwistWithCovariance::MergeFrom(from.twist());
    }
  }
}

void Odometry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_geometry_msgs.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_geometry_msgs.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_pose()) {
    if (!this->pose_->IsInitialized()) return false;
  }
  if (has_twist()) {
    if (!this->twist_->IsInitialized()) return false;
  }
  return true;
}

void Odometry::Swap(Odometry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  child_frame_id_.Swap(&other->child_frame_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(header_, other->header_);
  swap(pose_, other->pose_);
  swap(twist_, other->twist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Odometry::GetMetadata() const {
  protobuf_Odometry_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Odometry_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gz_geometry_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz_geometry_msgs::Odometry* Arena::CreateMaybeMessage< ::gz_geometry_msgs::Odometry >(Arena* arena) {
  return Arena::CreateInternal< ::gz_geometry_msgs::Odometry >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
