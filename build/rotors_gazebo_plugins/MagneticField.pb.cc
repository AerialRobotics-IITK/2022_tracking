// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MagneticField.proto

#include "MagneticField.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_Header_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_Header_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Header;
}  // namespace protobuf_Header_2eproto
namespace protobuf_vector3d_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_vector3d_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Vector3d;
}  // namespace protobuf_vector3d_2eproto
namespace gz_sensor_msgs {
class MagneticFieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MagneticField>
      _instance;
} _MagneticField_default_instance_;
}  // namespace gz_sensor_msgs
namespace protobuf_MagneticField_2eproto {
static void InitDefaultsMagneticField() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz_sensor_msgs::_MagneticField_default_instance_;
    new (ptr) ::gz_sensor_msgs::MagneticField();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz_sensor_msgs::MagneticField::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MagneticField =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMagneticField}, {
      &protobuf_Header_2eproto::scc_info_Header.base,
      &protobuf_vector3d_2eproto::scc_info_Vector3d.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MagneticField.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::MagneticField, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::MagneticField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::MagneticField, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::MagneticField, magnetic_field_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_sensor_msgs::MagneticField, magnetic_field_covariance_),
  0,
  1,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gz_sensor_msgs::MagneticField)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz_sensor_msgs::_MagneticField_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "MagneticField.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023MagneticField.proto\022\016gz_sensor_msgs\032\020q"
      "uaternion.proto\032\016vector3d.proto\032\014Header."
      "proto\"\212\001\n\rMagneticField\022#\n\006header\030\001 \002(\0132"
      "\023.gz_std_msgs.Header\022-\n\016magnetic_field\030\002"
      " \002(\0132\025.gazebo.msgs.Vector3d\022%\n\031magnetic_"
      "field_covariance\030\003 \003(\002B\002\020\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 226);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MagneticField.proto", &protobuf_RegisterTypes);
  ::protobuf_quaternion_2eproto::AddDescriptors();
  ::protobuf_vector3d_2eproto::AddDescriptors();
  ::protobuf_Header_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_MagneticField_2eproto
namespace gz_sensor_msgs {

// ===================================================================

void MagneticField::InitAsDefaultInstance() {
  ::gz_sensor_msgs::_MagneticField_default_instance_._instance.get_mutable()->header_ = const_cast< ::gz_std_msgs::Header*>(
      ::gz_std_msgs::Header::internal_default_instance());
  ::gz_sensor_msgs::_MagneticField_default_instance_._instance.get_mutable()->magnetic_field_ = const_cast< ::gazebo::msgs::Vector3d*>(
      ::gazebo::msgs::Vector3d::internal_default_instance());
}
void MagneticField::clear_header() {
  if (header_ != NULL) header_->Clear();
  clear_has_header();
}
void MagneticField::clear_magnetic_field() {
  if (magnetic_field_ != NULL) magnetic_field_->Clear();
  clear_has_magnetic_field();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MagneticField::kHeaderFieldNumber;
const int MagneticField::kMagneticFieldFieldNumber;
const int MagneticField::kMagneticFieldCovarianceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MagneticField::MagneticField()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MagneticField_2eproto::scc_info_MagneticField.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_sensor_msgs.MagneticField)
}
MagneticField::MagneticField(const MagneticField& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      magnetic_field_covariance_(from.magnetic_field_covariance_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::gz_std_msgs::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_magnetic_field()) {
    magnetic_field_ = new ::gazebo::msgs::Vector3d(*from.magnetic_field_);
  } else {
    magnetic_field_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:gz_sensor_msgs.MagneticField)
}

void MagneticField::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magnetic_field_) -
      reinterpret_cast<char*>(&header_)) + sizeof(magnetic_field_));
}

MagneticField::~MagneticField() {
  // @@protoc_insertion_point(destructor:gz_sensor_msgs.MagneticField)
  SharedDtor();
}

void MagneticField::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete magnetic_field_;
}

void MagneticField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MagneticField::descriptor() {
  ::protobuf_MagneticField_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MagneticField_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MagneticField& MagneticField::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MagneticField_2eproto::scc_info_MagneticField.base);
  return *internal_default_instance();
}


void MagneticField::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_sensor_msgs.MagneticField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  magnetic_field_covariance_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(magnetic_field_ != NULL);
      magnetic_field_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MagneticField::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_sensor_msgs.MagneticField)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gz_std_msgs.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gazebo.msgs.Vector3d magnetic_field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_magnetic_field()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float magnetic_field_covariance = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_magnetic_field_covariance())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26u, input, this->mutable_magnetic_field_covariance())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_sensor_msgs.MagneticField)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_sensor_msgs.MagneticField)
  return false;
#undef DO_
}

void MagneticField::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_sensor_msgs.MagneticField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gz_std_msgs.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // required .gazebo.msgs.Vector3d magnetic_field = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_magnetic_field(), output);
  }

  // repeated float magnetic_field_covariance = 3 [packed = true];
  if (this->magnetic_field_covariance_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _magnetic_field_covariance_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->magnetic_field_covariance().data(), this->magnetic_field_covariance_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_sensor_msgs.MagneticField)
}

::google::protobuf::uint8* MagneticField::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz_sensor_msgs.MagneticField)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .gz_std_msgs.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // required .gazebo.msgs.Vector3d magnetic_field = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_magnetic_field(), deterministic, target);
  }

  // repeated float magnetic_field_covariance = 3 [packed = true];
  if (this->magnetic_field_covariance_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _magnetic_field_covariance_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->magnetic_field_covariance_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_sensor_msgs.MagneticField)
  return target;
}

size_t MagneticField::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_sensor_msgs.MagneticField)
  size_t total_size = 0;

  if (has_header()) {
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  if (has_magnetic_field()) {
    // required .gazebo.msgs.Vector3d magnetic_field = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *magnetic_field_);
  }

  return total_size;
}
size_t MagneticField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz_sensor_msgs.MagneticField)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .gz_std_msgs.Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);

    // required .gazebo.msgs.Vector3d magnetic_field = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *magnetic_field_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated float magnetic_field_covariance = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->magnetic_field_covariance_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _magnetic_field_covariance_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MagneticField::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_sensor_msgs.MagneticField)
  GOOGLE_DCHECK_NE(&from, this);
  const MagneticField* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MagneticField>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_sensor_msgs.MagneticField)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_sensor_msgs.MagneticField)
    MergeFrom(*source);
  }
}

void MagneticField::MergeFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_sensor_msgs.MagneticField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  magnetic_field_covariance_.MergeFrom(from.magnetic_field_covariance_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::gz_std_msgs::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_magnetic_field()->::gazebo::msgs::Vector3d::MergeFrom(from.magnetic_field());
    }
  }
}

void MagneticField::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_sensor_msgs.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagneticField::CopyFrom(const MagneticField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_sensor_msgs.MagneticField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagneticField::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  if (has_magnetic_field()) {
    if (!this->magnetic_field_->IsInitialized()) return false;
  }
  return true;
}

void MagneticField::Swap(MagneticField* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MagneticField::InternalSwap(MagneticField* other) {
  using std::swap;
  magnetic_field_covariance_.InternalSwap(&other->magnetic_field_covariance_);
  swap(header_, other->header_);
  swap(magnetic_field_, other->magnetic_field_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MagneticField::GetMetadata() const {
  protobuf_MagneticField_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_MagneticField_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gz_sensor_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz_sensor_msgs::MagneticField* Arena::CreateMaybeMessage< ::gz_sensor_msgs::MagneticField >(Arena* arena) {
  return Arena::CreateInternal< ::gz_sensor_msgs::MagneticField >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
