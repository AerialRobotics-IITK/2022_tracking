// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vector3dStamped.proto

#ifndef PROTOBUF_INCLUDED_Vector3dStamped_2eproto
#define PROTOBUF_INCLUDED_Vector3dStamped_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Header.pb.h"
#include "vector3d.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_Vector3dStamped_2eproto 

namespace protobuf_Vector3dStamped_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_Vector3dStamped_2eproto
namespace gz_geometry_msgs {
class Vector3dStamped;
class Vector3dStampedDefaultTypeInternal;
extern Vector3dStampedDefaultTypeInternal _Vector3dStamped_default_instance_;
}  // namespace gz_geometry_msgs
namespace google {
namespace protobuf {
template<> ::gz_geometry_msgs::Vector3dStamped* Arena::CreateMaybeMessage<::gz_geometry_msgs::Vector3dStamped>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gz_geometry_msgs {

// ===================================================================

class Vector3dStamped : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gz_geometry_msgs.Vector3dStamped) */ {
 public:
  Vector3dStamped();
  virtual ~Vector3dStamped();

  Vector3dStamped(const Vector3dStamped& from);

  inline Vector3dStamped& operator=(const Vector3dStamped& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vector3dStamped(Vector3dStamped&& from) noexcept
    : Vector3dStamped() {
    *this = ::std::move(from);
  }

  inline Vector3dStamped& operator=(Vector3dStamped&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3dStamped& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3dStamped* internal_default_instance() {
    return reinterpret_cast<const Vector3dStamped*>(
               &_Vector3dStamped_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Vector3dStamped* other);
  friend void swap(Vector3dStamped& a, Vector3dStamped& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vector3dStamped* New() const final {
    return CreateMaybeMessage<Vector3dStamped>(NULL);
  }

  Vector3dStamped* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vector3dStamped>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vector3dStamped& from);
  void MergeFrom(const Vector3dStamped& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3dStamped* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gz_std_msgs.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::gz_std_msgs::Header& _internal_header() const;
  public:
  const ::gz_std_msgs::Header& header() const;
  ::gz_std_msgs::Header* release_header();
  ::gz_std_msgs::Header* mutable_header();
  void set_allocated_header(::gz_std_msgs::Header* header);

  // required .gazebo.msgs.Vector3d position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::gazebo::msgs::Vector3d& _internal_position() const;
  public:
  const ::gazebo::msgs::Vector3d& position() const;
  ::gazebo::msgs::Vector3d* release_position();
  ::gazebo::msgs::Vector3d* mutable_position();
  void set_allocated_position(::gazebo::msgs::Vector3d* position);

  // @@protoc_insertion_point(class_scope:gz_geometry_msgs.Vector3dStamped)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_position();
  void clear_has_position();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::gz_std_msgs::Header* header_;
  ::gazebo::msgs::Vector3d* position_;
  friend struct ::protobuf_Vector3dStamped_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3dStamped

// required .gz_std_msgs.Header header = 1;
inline bool Vector3dStamped::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3dStamped::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3dStamped::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::gz_std_msgs::Header& Vector3dStamped::_internal_header() const {
  return *header_;
}
inline const ::gz_std_msgs::Header& Vector3dStamped::header() const {
  const ::gz_std_msgs::Header* p = header_;
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.Vector3dStamped.header)
  return p != NULL ? *p : *reinterpret_cast<const ::gz_std_msgs::Header*>(
      &::gz_std_msgs::_Header_default_instance_);
}
inline ::gz_std_msgs::Header* Vector3dStamped::release_header() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.Vector3dStamped.header)
  clear_has_header();
  ::gz_std_msgs::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::gz_std_msgs::Header* Vector3dStamped::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::gz_std_msgs::Header>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.Vector3dStamped.header)
  return header_;
}
inline void Vector3dStamped::set_allocated_header(::gz_std_msgs::Header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.Vector3dStamped.header)
}

// required .gazebo.msgs.Vector3d position = 2;
inline bool Vector3dStamped::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3dStamped::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3dStamped::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::gazebo::msgs::Vector3d& Vector3dStamped::_internal_position() const {
  return *position_;
}
inline const ::gazebo::msgs::Vector3d& Vector3dStamped::position() const {
  const ::gazebo::msgs::Vector3d* p = position_;
  // @@protoc_insertion_point(field_get:gz_geometry_msgs.Vector3dStamped.position)
  return p != NULL ? *p : *reinterpret_cast<const ::gazebo::msgs::Vector3d*>(
      &::gazebo::msgs::_Vector3d_default_instance_);
}
inline ::gazebo::msgs::Vector3d* Vector3dStamped::release_position() {
  // @@protoc_insertion_point(field_release:gz_geometry_msgs.Vector3dStamped.position)
  clear_has_position();
  ::gazebo::msgs::Vector3d* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::gazebo::msgs::Vector3d* Vector3dStamped::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::gazebo::msgs::Vector3d>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gz_geometry_msgs.Vector3dStamped.position)
  return position_;
}
inline void Vector3dStamped::set_allocated_position(::gazebo::msgs::Vector3d* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
  } else {
    clear_has_position();
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:gz_geometry_msgs.Vector3dStamped.position)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace gz_geometry_msgs

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_Vector3dStamped_2eproto
