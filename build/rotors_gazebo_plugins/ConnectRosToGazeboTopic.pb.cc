// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ConnectRosToGazeboTopic.proto

#include "ConnectRosToGazeboTopic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace gz_std_msgs {
class ConnectRosToGazeboTopicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ConnectRosToGazeboTopic>
      _instance;
} _ConnectRosToGazeboTopic_default_instance_;
}  // namespace gz_std_msgs
namespace protobuf_ConnectRosToGazeboTopic_2eproto {
static void InitDefaultsConnectRosToGazeboTopic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::gz_std_msgs::_ConnectRosToGazeboTopic_default_instance_;
    new (ptr) ::gz_std_msgs::ConnectRosToGazeboTopic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::gz_std_msgs::ConnectRosToGazeboTopic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ConnectRosToGazeboTopic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsConnectRosToGazeboTopic}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ConnectRosToGazeboTopic.base);
}

::google::protobuf::Metadata file_level_metadata[1];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_std_msgs::ConnectRosToGazeboTopic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_std_msgs::ConnectRosToGazeboTopic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_std_msgs::ConnectRosToGazeboTopic, ros_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_std_msgs::ConnectRosToGazeboTopic, gazebo_topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::gz_std_msgs::ConnectRosToGazeboTopic, msgtype_),
  0,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::gz_std_msgs::ConnectRosToGazeboTopic)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::gz_std_msgs::_ConnectRosToGazeboTopic_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ConnectRosToGazeboTopic.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035ConnectRosToGazeboTopic.proto\022\013gz_std_"
      "msgs\"\343\001\n\027ConnectRosToGazeboTopic\022\021\n\tros_"
      "topic\030\001 \002(\t\022\024\n\014gazebo_topic\030\003 \002(\t\022=\n\007msg"
      "Type\030\004 \002(\0162,.gz_std_msgs.ConnectRosToGaz"
      "eboTopic.MsgType\"`\n\007MsgType\022\r\n\tACTUATORS"
      "\020\000\022\027\n\023COMMAND_MOTOR_SPEED\020\001\022\035\n\031ROLL_PITC"
      "H_YAWRATE_THRUST\020\002\022\016\n\nWIND_SPEED\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 274);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ConnectRosToGazeboTopic.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ConnectRosToGazeboTopic_2eproto
namespace gz_std_msgs {
const ::google::protobuf::EnumDescriptor* ConnectRosToGazeboTopic_MsgType_descriptor() {
  protobuf_ConnectRosToGazeboTopic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_ConnectRosToGazeboTopic_2eproto::file_level_enum_descriptors[0];
}
bool ConnectRosToGazeboTopic_MsgType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::ACTUATORS;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::COMMAND_MOTOR_SPEED;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::ROLL_PITCH_YAWRATE_THRUST;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::WIND_SPEED;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::MsgType_MIN;
const ConnectRosToGazeboTopic_MsgType ConnectRosToGazeboTopic::MsgType_MAX;
const int ConnectRosToGazeboTopic::MsgType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void ConnectRosToGazeboTopic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectRosToGazeboTopic::kRosTopicFieldNumber;
const int ConnectRosToGazeboTopic::kGazeboTopicFieldNumber;
const int ConnectRosToGazeboTopic::kMsgTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectRosToGazeboTopic::ConnectRosToGazeboTopic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ConnectRosToGazeboTopic_2eproto::scc_info_ConnectRosToGazeboTopic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:gz_std_msgs.ConnectRosToGazeboTopic)
}
ConnectRosToGazeboTopic::ConnectRosToGazeboTopic(const ConnectRosToGazeboTopic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ros_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ros_topic()) {
    ros_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ros_topic_);
  }
  gazebo_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_gazebo_topic()) {
    gazebo_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gazebo_topic_);
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:gz_std_msgs.ConnectRosToGazeboTopic)
}

void ConnectRosToGazeboTopic::SharedCtor() {
  ros_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gazebo_topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgtype_ = 0;
}

ConnectRosToGazeboTopic::~ConnectRosToGazeboTopic() {
  // @@protoc_insertion_point(destructor:gz_std_msgs.ConnectRosToGazeboTopic)
  SharedDtor();
}

void ConnectRosToGazeboTopic::SharedDtor() {
  ros_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gazebo_topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectRosToGazeboTopic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ConnectRosToGazeboTopic::descriptor() {
  ::protobuf_ConnectRosToGazeboTopic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ConnectRosToGazeboTopic_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ConnectRosToGazeboTopic& ConnectRosToGazeboTopic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ConnectRosToGazeboTopic_2eproto::scc_info_ConnectRosToGazeboTopic.base);
  return *internal_default_instance();
}


void ConnectRosToGazeboTopic::Clear() {
// @@protoc_insertion_point(message_clear_start:gz_std_msgs.ConnectRosToGazeboTopic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      ros_topic_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      gazebo_topic_.ClearNonDefaultToEmptyNoArena();
    }
  }
  msgtype_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConnectRosToGazeboTopic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gz_std_msgs.ConnectRosToGazeboTopic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ros_topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ros_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ros_topic().data(), static_cast<int>(this->ros_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gz_std_msgs.ConnectRosToGazeboTopic.ros_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string gazebo_topic = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gazebo_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->gazebo_topic().data(), static_cast<int>(this->gazebo_topic().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::gz_std_msgs::ConnectRosToGazeboTopic_MsgType_IsValid(value)) {
            set_msgtype(static_cast< ::gz_std_msgs::ConnectRosToGazeboTopic_MsgType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gz_std_msgs.ConnectRosToGazeboTopic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gz_std_msgs.ConnectRosToGazeboTopic)
  return false;
#undef DO_
}

void ConnectRosToGazeboTopic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gz_std_msgs.ConnectRosToGazeboTopic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ros_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ros_topic().data(), static_cast<int>(this->ros_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.ros_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ros_topic(), output);
  }

  // required string gazebo_topic = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gazebo_topic().data(), static_cast<int>(this->gazebo_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->gazebo_topic(), output);
  }

  // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->msgtype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gz_std_msgs.ConnectRosToGazeboTopic)
}

::google::protobuf::uint8* ConnectRosToGazeboTopic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:gz_std_msgs.ConnectRosToGazeboTopic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ros_topic = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ros_topic().data(), static_cast<int>(this->ros_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.ros_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ros_topic(), target);
  }

  // required string gazebo_topic = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->gazebo_topic().data(), static_cast<int>(this->gazebo_topic().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "gz_std_msgs.ConnectRosToGazeboTopic.gazebo_topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->gazebo_topic(), target);
  }

  // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->msgtype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gz_std_msgs.ConnectRosToGazeboTopic)
  return target;
}

size_t ConnectRosToGazeboTopic::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:gz_std_msgs.ConnectRosToGazeboTopic)
  size_t total_size = 0;

  if (has_ros_topic()) {
    // required string ros_topic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ros_topic());
  }

  if (has_gazebo_topic()) {
    // required string gazebo_topic = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gazebo_topic());
  }

  if (has_msgtype()) {
    // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());
  }

  return total_size;
}
size_t ConnectRosToGazeboTopic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gz_std_msgs.ConnectRosToGazeboTopic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ros_topic = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ros_topic());

    // required string gazebo_topic = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->gazebo_topic());

    // required .gz_std_msgs.ConnectRosToGazeboTopic.MsgType msgType = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->msgtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ConnectRosToGazeboTopic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  GOOGLE_DCHECK_NE(&from, this);
  const ConnectRosToGazeboTopic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectRosToGazeboTopic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gz_std_msgs.ConnectRosToGazeboTopic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gz_std_msgs.ConnectRosToGazeboTopic)
    MergeFrom(*source);
  }
}

void ConnectRosToGazeboTopic::MergeFrom(const ConnectRosToGazeboTopic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ros_topic();
      ros_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ros_topic_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_gazebo_topic();
      gazebo_topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.gazebo_topic_);
    }
    if (cached_has_bits & 0x00000004u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConnectRosToGazeboTopic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectRosToGazeboTopic::CopyFrom(const ConnectRosToGazeboTopic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gz_std_msgs.ConnectRosToGazeboTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectRosToGazeboTopic::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void ConnectRosToGazeboTopic::Swap(ConnectRosToGazeboTopic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectRosToGazeboTopic::InternalSwap(ConnectRosToGazeboTopic* other) {
  using std::swap;
  ros_topic_.Swap(&other->ros_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  gazebo_topic_.Swap(&other->gazebo_topic_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgtype_, other->msgtype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ConnectRosToGazeboTopic::GetMetadata() const {
  protobuf_ConnectRosToGazeboTopic_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ConnectRosToGazeboTopic_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace gz_std_msgs
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::gz_std_msgs::ConnectRosToGazeboTopic* Arena::CreateMaybeMessage< ::gz_std_msgs::ConnectRosToGazeboTopic >(Arena* arena) {
  return Arena::CreateInternal< ::gz_std_msgs::ConnectRosToGazeboTopic >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
